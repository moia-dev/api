// This file contains all protobuf definitions for trip-booking HTTP API.
// Current clients:
// - Passenger App Android
// - Passenger App iOS
// - Partner API

syntax = "proto3";
option go_package = "tripv5";
option java_multiple_files = false;
option java_outer_classname = "TripV5";
option java_package = "io.moia.protos.trip.v5";

import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

package io.moia.protos.trip.v5;

// ----------------------- /trip/offer/ -----------------------

// A client requests an offer for a trip. The result of this request can be ordered / executed.
message RequestTrip {
  // Coordinates and street name (optional POI) of the place where the passenger starts walking towards the next virtual stop.
  NamedLocation origin = 1;
  // Coordinates and street name (optional POI) of the place where the passenger wants to go after being dropped off.
  NamedLocation destination = 2;
  // Number of seats in total and child seats contained in that number.
  SeatInfo seat_info = 3;
  // The requested pre-booking time
  TimeOffset time_offset = 4;
  // Formerly the Name of the customer
  reserved 5;
  // Unique referrer id if the app was opened via deep link from a partner.
  google.protobuf.StringValue referrer = 6;

  // Supported values for time offset.
  enum TimeOffset {
    NOW = 0;
    MIN_5 = 5;
    MIN_10 = 10;
    MIN_20 = 20;
  }
}

// Response of the trip request.
// This object will be send with HTTP status code 200.
message RequestTripResult {
  // The proposed trip offer. This can be used to order a trip.
  // The id contained in this object will be the tripId, used for ordering, cancellation and feedback.
  Offer offer = 1;
  // The signature guarantees the integrity of the offer.
  string offer_signature = 2;
}

// ----------------------- /trip/order/ -----------------------

// A client selected an offer and sends a request to purchase this offer.
message OrderTrip {
  // Contains the data of the offer as returned from the trip request.
  Offer offer = 1;
  // The signature guarantees the integrity of the offer.
  string offer_signature = 2;
  // Formerly the nonce generated by a PSP to identify the payment for Payment 1.
  reserved 3;
  // Includes coupon information of used coupons.
  CouponInformation coupon_information = 4;
  // The optional (not passed for partner APIs) black box payment method selection data for Payment 2.
  google.protobuf.Any payment_method_selection = 5;
  // The response to the PAYMENT_CLIENT_INTERACTION_REQUIRED error (e.g. 3-D Secure challenge)
  google.protobuf.Any client_interaction_response = 6;
  // The Id of the billing address that will be used for invoice
  google.protobuf.StringValue billing_address_id = 7;
}

// Response of the order trip request. Includes information about the vehicle that will execute the trip and current estimates.
message OrderTripResult {
  // The vehicle that is currently planned to execute the trip. This might change, updates via IoT / webhooks.
  VehicleInfo vehicle_info = 1;
  // The current estimates for pickup and delivery, updates arrive via IoT / webhooks.
  Schedule schedule = 2;
}

// ----------------------- /trip/cancel/ -----------------------

// A client requests to cancel a trip.
message CancelTrip {
  // Identifies the trip
  string trip_id = 1;
}

// Empty message to confirm the successful cancellation.
message CancelTripResult {
}

// ----------------------- /trip/last/ -----------------------

// Successful response of a GET /trip/last endpoint.
// Contains the all information about last trip that has been purchased (its offer, vehicleInfo, latest schedule and its current state).
// The trip is either active or has been completed with a delivery or cancellation.
message LastTripResult {
  // The original offer (this includes the tripId).
  Offer offer = 1;
  // The chosen vehicle.
  VehicleInfo vehicle_info = 2;
  // Trip latest pickup and delivery estimates if trip is not yet completed.
  Schedule latest_schedule = 3;
  // The current state of the trip. Enum contains only trip states between waiting-for-vehicle and completed, i.e. no offer or order rejections.
  TripState state = 4;
  // Feedback information needed when possibly displaying the last trip on the client side.
  FeedbackInformation feedback_information = 5;
  // Tipping information needed when possibly displaying the last trip on the client side. Only true if user either tipped or explicitly dismissed tipping
  bool tip_considered = 6;

  // All possible states of a trip that are stored in the database.
  enum TripState {
    NONE = 0;
    // Trip has been successfully purchased but customer has not yet been picked up.
    TRIP_PURCHASED = 1;
    // Customer has been picked up by vehicle but not yet been delivered.
    PICKED_UP = 2;
    // Customer has been delivered by vehicle.
    DELIVERED = 3;
    // Trip has been canceled by the customer.
    CANCELED_BY_CUSTOMER = 4;
    // Trip has been canceled due to a NOT_SHOWN event.
    CANCELED_CUSTOMER_NOT_SHOWN = 5;
    // Trip has been canceled due to a VEHICLE_SERVICE_ABORTION event.
    CANCELED_VEHICLE_SERVICE_ABORTION = 6;
  }
}

// ----------------------- /feedback/{*} -----------------------

// A client creates feedback for a trip.
message CreateFeedback {
  // Identifies the trip to give feedback for.
  string trip_id = 1;
  // Whether the feedback is positive or negative (thumb up/down).
  bool positive = 2;
  // The categories the customer wants to give feedback for.
  repeated string category_ids = 3;
  // The actual feedback message (optional).
  google.protobuf.StringValue message = 4;
}

// The successful result of CreateFeedback.
message CreateFeedbackResult {
}

// Updates a feedback for a trip (identified by the tripId), must at least contain one categoryId and the message.
message UpdateFeedback {
  // Identifies the trip to give feedback for.
  string trip_id = 1;
  // The categories the customer wants to give feedback for.
  repeated string category_ids = 2;
  // The actual feedback message.
  google.protobuf.StringValue message = 3;
}

// Empty Message as result of a successful UpdateFeedback.
message UpdateFeedbackResult {
}

// Request the list of feedback categories.
message RequestFeedbackCategoriesResult {
  // The list of feedback categories.
  repeated FeedbackCategory categories = 1;
}

// ----------- INNER MESSAGES --------

// This object will be send with HTTP status code 400.
message TripError {
  // Error code. The object contains all possible error from trip-booking that can occur for all domain events.
  Code code = 1;
  // Error message. A human readable message that can hold more details and can be used for debugging.
  string message = 2;

  // This is optional and the content depends on the TripError code.
  TripErrorPayload payload = 3;

  // Error code.
  enum Code {
    NONE = 0;

    // no longer in use
    reserved 1, 2, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 30, 34, 35, 36;

    // -------------------------- General Errors --------------------------

    // An internal error occurred and the request cannot be fulfilled.
    GENERAL_ERROR = 32;
    // An error occurred during the dispatching process.
    DISPATCHING_ERROR = 6;

    // -------------------------- /trip/offer/ --------------------------

    // The requested ride time is not within the service hours.
    NOT_WITHIN_SERVICE_HOURS = 5;
    // Requested seats configuration can't be served.
    NOT_WITHIN_SEATS_RANGE = 41;
    // The service area is not known or not allowed for this user.
    NOT_WITHIN_SERVICE_AREA = 33;
    // From Dispatching2: Only identical stops for pickup and delivery fit request
    SAME_PICKUP_AND_DELIVERY_STOP = 38;
    // No pickup stop found near the requested location.
    NO_PICKUP_STOPS_NEAR = 7;
    // No delivery stop found near the requested location.
    NO_DELIVERY_STOPS_NEAR = 8;
    // No pickup stop and no delivery stop found near requested locations.
    NO_PICKUP_AND_DELIVERY_STOPS_NEAR = 9;
    // From Dispatching2: The combined distance to pickup and from delivery stop is too long.
    WALKING_LIMIT_EXCEEDED = 39;
    // From Dispatching2: The combined walking distance to pickup and from delivery stop is longer than the distance of the trip.
    DIRECT_WALK_IS_FASTER = 43;

    // -------------------------- /trip/order/ --------------------------

    // An error occurred during payment process.
    PAYMENT_ERROR = 3;
    // Payment: Client Interaction required.
    PAYMENT_CLIENT_INTERACTION_REQUIRED = 42;
    // A trip is already active for the given customer.
    TRIP_ACTIVE = 31;
    // A trip with the same id was previously completed.
    TRIP_ALREADY_COMPLETED = 37;
    // An offer with this id has failed before and cannot be ordered anymore.
    OFFER_FAILED_BEFORE = 40;
    // The selected offer has expired.
    OFFER_EXPIRED = 10;

    // -------------------------- /trip/last/ --------------------------
    // no specific errors

    // -------------------------- /trip/cancel/ --------------------------

    // When the customer tries to cancel a trip that we don't know.
    TRIP_TO_CANCEL_NOT_FOUND = 22;
    // Cancellation of the trip was rejected because the trip is in a state where it cannot be cancelled not yet or no longer
    CANCEL_REJECTED = 26;

    // -------------------------- /feedback/ --------------------------

    // Feedback for this trip has already been created.
    FEEDBACK_ALREADY_GIVEN = 29;

    // -------------------------- /feedback/categories/ --------------------------
    // no specific errors

    // -------------------------- /feedback/detailed/ --------------------------
    // The feedback that the customer tries to update cannot be found.
    FEEDBACK_TO_UPDATE_NOT_FOUND = 28;
  }

  // Payload for errors that convey more information.
  message TripErrorPayload {
    oneof payload {
      // Error data for a NotWithinServiceHours error
      NotWithinServiceHoursPayload not_within_service_hours_payload = 1;
      // Information about the interaction
      PaymentClientInteractionRequiredPayload payment_client_interaction_required_payload = 2;
    }
  }
  // UTC timestamp of the next service hours for the resolved service area.
  message NotWithinServiceHoursPayload {
    google.protobuf.Timestamp next_start_of_service = 1;
  }

  // Information about the interaction, provided by Payment 2, understood by the apps, unknown to trip-booking (e.g. 3-D Secure challenge).
  message PaymentClientInteractionRequiredPayload {
    google.protobuf.Any interaction_information = 1;
  }
}

// Complete information needed to order and execute an offer.
message Offer {
  // The id of this specification, which will identify the created trip. This will become the tripId.
  string id = 1;
  // Service area id where the trip will be executed.
  string service_area_id = 2;
  // Number of seats in total and child seats contained in that number.
  SeatInfo seat_info = 3;
  // Price of the ride.
  Price price = 4;
  // meta data coming from pricing
  PriceMetadata price_metadata = 13;
  // Coordinates and street name (optional POI) of the place where the passenger starts walking towards the next virtual stop.
  NamedLocation origin = 5;
  // The walk from the origin to the pickup stop, including duration and distance.
  Walk walk_to_pickup = 6;
  // The selected stop near the Origin for the vehicle to pick up the passenger(s).
  // The pickup stop is chosen by the system based on the origin, vehicle route, and system parameters.
  // The passenger(s) has to walk from the origin to the pickup stop.
  Stop pickup_stop = 7;
  // The time window in which the vehicle should arrive at the pickup stop.
  TimeRange pickup_time_range = 8;
  // The selected stop near the destination for the vehicle to deliver the passenger(s).
  // The delivery stop is chosen by the system based on the destination, vehicle route, and system parameters.
  // The passenger(s) has to walk from the delivery stop to the destination.
  Stop delivery_stop = 9;
  // The walk from the delivery stop to the destination
  Walk walk_to_destination = 10;
  // The time window in which the vehicle should arrive to the delivery stop.
  TimeRange delivery_time_range = 11;
  // Coordinates and street name (optional POI) of the place where the passenger wants to go after being dropped off.
  NamedLocation destination = 12;
  // The timestamp at which the offer was requested
  google.protobuf.Timestamp request_time = 14;
}

// The walking route, duration and distance from origin to pickup and delivery to destination.
message Walk {
  // Estimated duration for the walk.
  google.protobuf.Duration duration = 1;
  // Distance of the waling route in meters.
  float distance = 2;
  // Anchor points that define the walking route.
  repeated Location walking_path = 3;
}

// Time window in which the pickup or delivery can occur.
message TimeRange {
  // Start of acceptable pickup or delivery window.
  google.protobuf.Timestamp start = 1;
  // End of acceptable pickup or delivery window.
  google.protobuf.Timestamp end = 2;
}

// The price of a ride.
message Price {
  // The total amount, e.g. 5.85
  string amount = 1;
  // The 3-digit currency code for the price, e.g. EUR
  string currency = 2;
}

// Contains additional information about the calculated price.
message PriceMetadata {
  // The name of the price model
  string display_name = 1;
  // If true, show the name in the app.
  bool show_name = 2;
  // If true, this price can be combined with a coupon.
  bool coupons_allowed = 3;
  // The texts to be displayed in the mobile apps (might be empty). The key is the language code in ISO 639-1 notation (two-letter abbreviations), e.g. 'de' or 'en'.
  map<string, DisplayText> display_texts = 4;
}

// Contains the text to display in mobile apps.
message DisplayText {
  // The header
  string header = 2;
  // The description text
  string text = 3;
}

// A Location combined with its localized address.
message NamedLocation {
  // The location as lat and lon
  Location location = 1;
  // Street name and number, used for trip-history and domain events.
  string primary_address = 2;
  // Secondary address line, usually containing zip code and city, might also contain the country.
  google.protobuf.StringValue secondary_address = 3;
  // The name of a point of interest (e.g. Hamburg Airport).
  google.protobuf.StringValue primary_poi_name = 4;
  // Additional information for a point of interest (e.g. City, Country).
  google.protobuf.StringValue secondary_poi_name = 5;
}

// A location consisting of lat and lon.
message Location {
  // Latitude (as angular distance from the equator), Min-Value = -90, Max-Value = +90
  double lat = 1;
  // Longitude (as angular distance from the Prime Meridian), Min-Value = -180, Max-Value = +180.
  double lon = 2;
}

// Information about a virtual stop.
message Stop {
  // Identifier provided by the service area management.
  string id = 1;
  // Human readable name of the stop in different languages (abbrev. as ISO 639-1 (two-letter abbreviations)).
  map<string, string> name = 2;
  // Location of the stop accessible by a human.
  Location display_location = 3;
}

// Seat constellation.
message SeatInfo {
  // Total amount of seats.
  int32 seats = 1;
  // Thereof child transportation seats.
  int32 child_seats = 2;
  // Number of wheelchairs
  int32 wheelchairs = 3;
}

// Total reduction and identifiers of all used coupons.
message CouponInformation {
  // Total amount of price reduction.
  Price total_reduction = 1;
  // List of used coupon identifiers.
  repeated string coupon_ids = 2;
}

// The id and label of a vehicle.
message VehicleInfo {
  // The vehicle identifier.
  string id = 1;
  // A human-readable vehicle label.
  string label = 2;
}

// A vehicle schedule for pickup and delivery of a customer.
message Schedule {
  // Expected time when the vehicle will be at the pickup point.
  google.protobuf.Timestamp pickup = 1;
  // Expected time when the vehicle will be at the delivery point.
  google.protobuf.Timestamp delivery = 2;
}

// A feedback category entry, containing an id and a map with a language key and a text to display.
message FeedbackCategory {
  // The category id.
  string id = 1;
  // The category name. Key is a locale, e.g. 'de', 'en'
  map<string, string> name = 2;
}

// Feedback information needed when possibly displaying the last trip on the client side.
message FeedbackInformation {
  // Whether the feedback is positive or negative (thumb up/down).
  bool positive = 1;
  // The feedback categories the customer selected. Empty if no categories have been selected.
  repeated string category_ids = 2;
  // The optional feedback message.
  google.protobuf.StringValue message = 3;
}
